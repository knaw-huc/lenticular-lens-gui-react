/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as JobIdRouteImport } from './routes/$jobId'
import { Route as IndexRouteImport } from './routes/index'
import { Route as JobIdIndexRouteImport } from './routes/$jobId/index'
import { Route as JobIdLensIndexRouteImport } from './routes/$jobId/lens/index'
import { Route as JobIdDataSelectionIndexRouteImport } from './routes/$jobId/data-selection/index'
import { Route as JobIdAlignmentIndexRouteImport } from './routes/$jobId/alignment/index'
import { Route as JobIdLensIdRouteImport } from './routes/$jobId/lens/$id'
import { Route as JobIdDataSelectionIdRouteImport } from './routes/$jobId/data-selection/$id'
import { Route as JobIdAlignmentIdRouteImport } from './routes/$jobId/alignment/$id'

const JobIdRoute = JobIdRouteImport.update({
  id: '/$jobId',
  path: '/$jobId',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const JobIdIndexRoute = JobIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => JobIdRoute,
} as any)
const JobIdLensIndexRoute = JobIdLensIndexRouteImport.update({
  id: '/lens/',
  path: '/lens/',
  getParentRoute: () => JobIdRoute,
} as any)
const JobIdDataSelectionIndexRoute = JobIdDataSelectionIndexRouteImport.update({
  id: '/data-selection/',
  path: '/data-selection/',
  getParentRoute: () => JobIdRoute,
} as any)
const JobIdAlignmentIndexRoute = JobIdAlignmentIndexRouteImport.update({
  id: '/alignment/',
  path: '/alignment/',
  getParentRoute: () => JobIdRoute,
} as any)
const JobIdLensIdRoute = JobIdLensIdRouteImport.update({
  id: '/lens/$id',
  path: '/lens/$id',
  getParentRoute: () => JobIdRoute,
} as any)
const JobIdDataSelectionIdRoute = JobIdDataSelectionIdRouteImport.update({
  id: '/data-selection/$id',
  path: '/data-selection/$id',
  getParentRoute: () => JobIdRoute,
} as any)
const JobIdAlignmentIdRoute = JobIdAlignmentIdRouteImport.update({
  id: '/alignment/$id',
  path: '/alignment/$id',
  getParentRoute: () => JobIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$jobId': typeof JobIdRouteWithChildren
  '/$jobId/': typeof JobIdIndexRoute
  '/$jobId/alignment/$id': typeof JobIdAlignmentIdRoute
  '/$jobId/data-selection/$id': typeof JobIdDataSelectionIdRoute
  '/$jobId/lens/$id': typeof JobIdLensIdRoute
  '/$jobId/alignment': typeof JobIdAlignmentIndexRoute
  '/$jobId/data-selection': typeof JobIdDataSelectionIndexRoute
  '/$jobId/lens': typeof JobIdLensIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$jobId': typeof JobIdIndexRoute
  '/$jobId/alignment/$id': typeof JobIdAlignmentIdRoute
  '/$jobId/data-selection/$id': typeof JobIdDataSelectionIdRoute
  '/$jobId/lens/$id': typeof JobIdLensIdRoute
  '/$jobId/alignment': typeof JobIdAlignmentIndexRoute
  '/$jobId/data-selection': typeof JobIdDataSelectionIndexRoute
  '/$jobId/lens': typeof JobIdLensIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$jobId': typeof JobIdRouteWithChildren
  '/$jobId/': typeof JobIdIndexRoute
  '/$jobId/alignment/$id': typeof JobIdAlignmentIdRoute
  '/$jobId/data-selection/$id': typeof JobIdDataSelectionIdRoute
  '/$jobId/lens/$id': typeof JobIdLensIdRoute
  '/$jobId/alignment/': typeof JobIdAlignmentIndexRoute
  '/$jobId/data-selection/': typeof JobIdDataSelectionIndexRoute
  '/$jobId/lens/': typeof JobIdLensIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$jobId'
    | '/$jobId/'
    | '/$jobId/alignment/$id'
    | '/$jobId/data-selection/$id'
    | '/$jobId/lens/$id'
    | '/$jobId/alignment'
    | '/$jobId/data-selection'
    | '/$jobId/lens'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$jobId'
    | '/$jobId/alignment/$id'
    | '/$jobId/data-selection/$id'
    | '/$jobId/lens/$id'
    | '/$jobId/alignment'
    | '/$jobId/data-selection'
    | '/$jobId/lens'
  id:
    | '__root__'
    | '/'
    | '/$jobId'
    | '/$jobId/'
    | '/$jobId/alignment/$id'
    | '/$jobId/data-selection/$id'
    | '/$jobId/lens/$id'
    | '/$jobId/alignment/'
    | '/$jobId/data-selection/'
    | '/$jobId/lens/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  JobIdRoute: typeof JobIdRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$jobId': {
      id: '/$jobId'
      path: '/$jobId'
      fullPath: '/$jobId'
      preLoaderRoute: typeof JobIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$jobId/': {
      id: '/$jobId/'
      path: '/'
      fullPath: '/$jobId/'
      preLoaderRoute: typeof JobIdIndexRouteImport
      parentRoute: typeof JobIdRoute
    }
    '/$jobId/lens/': {
      id: '/$jobId/lens/'
      path: '/lens'
      fullPath: '/$jobId/lens'
      preLoaderRoute: typeof JobIdLensIndexRouteImport
      parentRoute: typeof JobIdRoute
    }
    '/$jobId/data-selection/': {
      id: '/$jobId/data-selection/'
      path: '/data-selection'
      fullPath: '/$jobId/data-selection'
      preLoaderRoute: typeof JobIdDataSelectionIndexRouteImport
      parentRoute: typeof JobIdRoute
    }
    '/$jobId/alignment/': {
      id: '/$jobId/alignment/'
      path: '/alignment'
      fullPath: '/$jobId/alignment'
      preLoaderRoute: typeof JobIdAlignmentIndexRouteImport
      parentRoute: typeof JobIdRoute
    }
    '/$jobId/lens/$id': {
      id: '/$jobId/lens/$id'
      path: '/lens/$id'
      fullPath: '/$jobId/lens/$id'
      preLoaderRoute: typeof JobIdLensIdRouteImport
      parentRoute: typeof JobIdRoute
    }
    '/$jobId/data-selection/$id': {
      id: '/$jobId/data-selection/$id'
      path: '/data-selection/$id'
      fullPath: '/$jobId/data-selection/$id'
      preLoaderRoute: typeof JobIdDataSelectionIdRouteImport
      parentRoute: typeof JobIdRoute
    }
    '/$jobId/alignment/$id': {
      id: '/$jobId/alignment/$id'
      path: '/alignment/$id'
      fullPath: '/$jobId/alignment/$id'
      preLoaderRoute: typeof JobIdAlignmentIdRouteImport
      parentRoute: typeof JobIdRoute
    }
  }
}

interface JobIdRouteChildren {
  JobIdIndexRoute: typeof JobIdIndexRoute
  JobIdAlignmentIdRoute: typeof JobIdAlignmentIdRoute
  JobIdDataSelectionIdRoute: typeof JobIdDataSelectionIdRoute
  JobIdLensIdRoute: typeof JobIdLensIdRoute
  JobIdAlignmentIndexRoute: typeof JobIdAlignmentIndexRoute
  JobIdDataSelectionIndexRoute: typeof JobIdDataSelectionIndexRoute
  JobIdLensIndexRoute: typeof JobIdLensIndexRoute
}

const JobIdRouteChildren: JobIdRouteChildren = {
  JobIdIndexRoute: JobIdIndexRoute,
  JobIdAlignmentIdRoute: JobIdAlignmentIdRoute,
  JobIdDataSelectionIdRoute: JobIdDataSelectionIdRoute,
  JobIdLensIdRoute: JobIdLensIdRoute,
  JobIdAlignmentIndexRoute: JobIdAlignmentIndexRoute,
  JobIdDataSelectionIndexRoute: JobIdDataSelectionIndexRoute,
  JobIdLensIndexRoute: JobIdLensIndexRoute,
}

const JobIdRouteWithChildren = JobIdRoute._addFileChildren(JobIdRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  JobIdRoute: JobIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
